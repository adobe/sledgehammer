// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adobe/sledgehammer/installer/env (interfaces: ENV)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockENV is a mock of ENV interface
type MockENV struct {
	ctrl     *gomock.Controller
	recorder *MockENVMockRecorder
}

// MockENVMockRecorder is the mock recorder for MockENV
type MockENVMockRecorder struct {
	mock *MockENV
}

// NewMockENV creates a new mock instance
func NewMockENV(ctrl *gomock.Controller) *MockENV {
	mock := &MockENV{ctrl: ctrl}
	mock.recorder = &MockENVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockENV) EXPECT() *MockENVMockRecorder {
	return m.recorder
}

// GetRootDir mocks base method
func (m *MockENV) GetRootDir() (string, bool) {
	ret := m.ctrl.Call(m, "GetRootDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRootDir indicates an expected call of GetRootDir
func (mr *MockENVMockRecorder) GetRootDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootDir", reflect.TypeOf((*MockENV)(nil).GetRootDir))
}

// GetSystem mocks base method
func (m *MockENV) GetSystem() (string, bool) {
	ret := m.ctrl.Call(m, "GetSystem")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSystem indicates an expected call of GetSystem
func (mr *MockENVMockRecorder) GetSystem() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystem", reflect.TypeOf((*MockENV)(nil).GetSystem))
}
