// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adobe/sledgehammer/utils/docker (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	go_dockerclient "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AttachToContainer mocks base method
func (m *MockClient) AttachToContainer(arg0 go_dockerclient.AttachToContainerOptions) error {
	ret := m.ctrl.Call(m, "AttachToContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachToContainer indicates an expected call of AttachToContainer
func (mr *MockClientMockRecorder) AttachToContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToContainer", reflect.TypeOf((*MockClient)(nil).AttachToContainer), arg0)
}

// AttachToContainerNonBlocking mocks base method
func (m *MockClient) AttachToContainerNonBlocking(arg0 go_dockerclient.AttachToContainerOptions) (go_dockerclient.CloseWaiter, error) {
	ret := m.ctrl.Call(m, "AttachToContainerNonBlocking", arg0)
	ret0, _ := ret[0].(go_dockerclient.CloseWaiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToContainerNonBlocking indicates an expected call of AttachToContainerNonBlocking
func (mr *MockClientMockRecorder) AttachToContainerNonBlocking(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToContainerNonBlocking", reflect.TypeOf((*MockClient)(nil).AttachToContainerNonBlocking), arg0)
}

// CreateContainer mocks base method
func (m *MockClient) CreateContainer(arg0 go_dockerclient.CreateContainerOptions) (*go_dockerclient.Container, error) {
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer
func (mr *MockClientMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockClient)(nil).CreateContainer), arg0)
}

// CreateExec mocks base method
func (m *MockClient) CreateExec(arg0 go_dockerclient.CreateExecOptions) (*go_dockerclient.Exec, error) {
	ret := m.ctrl.Call(m, "CreateExec", arg0)
	ret0, _ := ret[0].(*go_dockerclient.Exec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExec indicates an expected call of CreateExec
func (mr *MockClientMockRecorder) CreateExec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExec", reflect.TypeOf((*MockClient)(nil).CreateExec), arg0)
}

// Info mocks base method
func (m *MockClient) Info() (*go_dockerclient.DockerInfo, error) {
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*go_dockerclient.DockerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockClientMockRecorder) Info() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info))
}

// InspectContainer mocks base method
func (m *MockClient) InspectContainer(arg0 string) (*go_dockerclient.Container, error) {
	ret := m.ctrl.Call(m, "InspectContainer", arg0)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectContainer indicates an expected call of InspectContainer
func (mr *MockClientMockRecorder) InspectContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectContainer", reflect.TypeOf((*MockClient)(nil).InspectContainer), arg0)
}

// InspectExec mocks base method
func (m *MockClient) InspectExec(arg0 string) (*go_dockerclient.ExecInspect, error) {
	ret := m.ctrl.Call(m, "InspectExec", arg0)
	ret0, _ := ret[0].(*go_dockerclient.ExecInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectExec indicates an expected call of InspectExec
func (mr *MockClientMockRecorder) InspectExec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectExec", reflect.TypeOf((*MockClient)(nil).InspectExec), arg0)
}

// ListContainers mocks base method
func (m *MockClient) ListContainers(arg0 go_dockerclient.ListContainersOptions) ([]go_dockerclient.APIContainers, error) {
	ret := m.ctrl.Call(m, "ListContainers", arg0)
	ret0, _ := ret[0].([]go_dockerclient.APIContainers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers
func (mr *MockClientMockRecorder) ListContainers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockClient)(nil).ListContainers), arg0)
}

// ListImages mocks base method
func (m *MockClient) ListImages(arg0 go_dockerclient.ListImagesOptions) ([]go_dockerclient.APIImages, error) {
	ret := m.ctrl.Call(m, "ListImages", arg0)
	ret0, _ := ret[0].([]go_dockerclient.APIImages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockClientMockRecorder) ListImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockClient)(nil).ListImages), arg0)
}

// Logs mocks base method
func (m *MockClient) Logs(arg0 go_dockerclient.LogsOptions) error {
	ret := m.ctrl.Call(m, "Logs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logs indicates an expected call of Logs
func (mr *MockClientMockRecorder) Logs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockClient)(nil).Logs), arg0)
}

// PullImage mocks base method
func (m *MockClient) PullImage(arg0 go_dockerclient.PullImageOptions, arg1 go_dockerclient.AuthConfiguration) error {
	ret := m.ctrl.Call(m, "PullImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage
func (mr *MockClientMockRecorder) PullImage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockClient)(nil).PullImage), arg0, arg1)
}

// RemoveContainer mocks base method
func (m *MockClient) RemoveContainer(arg0 go_dockerclient.RemoveContainerOptions) error {
	ret := m.ctrl.Call(m, "RemoveContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer
func (mr *MockClientMockRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockClient)(nil).RemoveContainer), arg0)
}

// StartContainer mocks base method
func (m *MockClient) StartContainer(arg0 string, arg1 *go_dockerclient.HostConfig) error {
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer
func (mr *MockClientMockRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockClient)(nil).StartContainer), arg0, arg1)
}

// StartExec mocks base method
func (m *MockClient) StartExec(arg0 string, arg1 go_dockerclient.StartExecOptions) error {
	ret := m.ctrl.Call(m, "StartExec", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExec indicates an expected call of StartExec
func (mr *MockClientMockRecorder) StartExec(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExec", reflect.TypeOf((*MockClient)(nil).StartExec), arg0, arg1)
}

// StartExecNonBlocking mocks base method
func (m *MockClient) StartExecNonBlocking(arg0 string, arg1 go_dockerclient.StartExecOptions) (go_dockerclient.CloseWaiter, error) {
	ret := m.ctrl.Call(m, "StartExecNonBlocking", arg0, arg1)
	ret0, _ := ret[0].(go_dockerclient.CloseWaiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecNonBlocking indicates an expected call of StartExecNonBlocking
func (mr *MockClientMockRecorder) StartExecNonBlocking(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecNonBlocking", reflect.TypeOf((*MockClient)(nil).StartExecNonBlocking), arg0, arg1)
}

// Version mocks base method
func (m *MockClient) Version() (*go_dockerclient.Env, error) {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*go_dockerclient.Env)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockClientMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClient)(nil).Version))
}
