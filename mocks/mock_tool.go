// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adobe/sledgehammer/slh/tool (interfaces: Tool)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tool "github.com/adobe/sledgehammer/slh/tool"
	gomock "github.com/golang/mock/gomock"
)

// MockTool is a mock of Tool interface
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
}

// MockToolMockRecorder is the mock recorder for MockTool
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// Data mocks base method
func (m *MockTool) Data() *tool.Data {
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(*tool.Data)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockToolMockRecorder) Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockTool)(nil).Data))
}

// Execute mocks base method
func (m *MockTool) Execute() {
	m.ctrl.Call(m, "Execute")
}

// Execute indicates an expected call of Execute
func (mr *MockToolMockRecorder) Execute() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTool)(nil).Execute))
}

// Start mocks base method
func (m *MockTool) Start() {
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockToolMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTool)(nil).Start))
}

// Versions mocks base method
func (m *MockTool) Versions() ([]string, error) {
	ret := m.ctrl.Call(m, "Versions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Versions indicates an expected call of Versions
func (mr *MockToolMockRecorder) Versions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*MockTool)(nil).Versions))
}
